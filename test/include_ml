#use "topfind.camlp5";;
#require "compiler-libs.common" ;;
#require "camlp-streams";;
#require "oUnit";;
#require "fmt";;
#require "rresult";;
#require "pcre";;
#require "bos";;
(*
#require "camlp5.pa_op";;
Pcaml.inter_phrases := Some ";;\n";;
 *)
#require "camlp5.pa_r";;
Pcaml.inter_phrases := Some ";\n";;

(*
#require "camlp5.pr_o";;
 *)

#require "camlp5.pr_r";;
Pcaml.inter_phrases := Some ";\n";;

#require "camlp5.quotations" ;;

#require "pa_ppx.utils";;
open Pa_ppx_utils.Std ;;

#require "pa_ppx.testutils" ;;
open Pa_ppx_testutils.Papr_util ;;

#require "pa_ppx.base";;
Pa_ppx_base.Pp_MLast.Ploc.pp_loc_verbose := true ;;
let pp_loc = Pa_ppx_base.Pp_MLast.Ploc.pp Fmt.stdout ;;
#install_printer pp_loc ;;

#require "pa_llk" ;;
open Pa_llk ;;
open Pr_llk ;;
open Comp_llk ;;

(*
let pp_a_entry e = Fmt.(pf stdout "<:entry<%s>>" (Pr.entry Pprintf.empty_pc e)) ;;
#install_printer pp_a_entry ;;

let pp_a_level e = Fmt.(pf stdout "<:level<%s>>" (Pr.level false Pprintf.empty_pc e)) ;;
#install_printer pp_a_level ;;

let pp_a_symbol e = Fmt.(pf stdout "<:symbol<%s>>" (Pr.symbol Pprintf.empty_pc e)) ;;
#install_printer pp_a_symbol ;;

let pp_a_psymbol e = Fmt.(pf stdout "<:psymbol<%s>>" (Pr.psymbol Pprintf.empty_pc e)) ;;
#install_printer pp_a_psymbol ;;

let pp_a_rule e = Fmt.(pf stdout "<:rule<%s>>" (Pr.rule true Pprintf.empty_pc e)) ;;
#install_printer pp_a_rule ;;
 *)

(*
;;; Local Variables: ***
;;; mode:tuareg ***
;;; End: ***

*)
