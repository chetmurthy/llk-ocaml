#use "topfind.camlp5";;
#require "compiler-libs.common" ;;
#require "camlp-streams";;
#require "oUnit";;
#require "fmt";;
#require "rresult";;
#require "pcre";;
#require "bos";;

#require "camlp5.pa_op";;
Pcaml.inter_phrases := Some ";;\n";;
(*
#require "camlp5.pa_r";;
Pcaml.inter_phrases := Some ";\n";;
 *)
#require "camlp5.pr_o";;

(*
#require "camlp5.pr_r";;
Pcaml.inter_phrases := Some ";\n";;
 *)
#require "camlp5.parser_quotations" ;;

#require "pa_ppx.utils";;
open Pa_ppx_utils.Std ;;

#require "pa_ppx.testutils" ;;
open Pa_ppx_testutils.Papr_util ;;

#require "pa_ppx.base";;
Pa_ppx_base.Pp_MLast.Ploc.pp_loc_verbose := false ;;
let pp_loc = Pa_ppx_base.Pp_MLast.Ploc.pp Fmt.stdout ;;
#install_printer pp_loc ;;

#print_length 1048576 ;;
#print_depth 1048576 ;;
let pp_stream_length = ref 1024 ;;
pp_stream_length :=  1024 ;;
let pp_token_stream strm =
  let l = Stream.npeek !pp_stream_length strm in
  let rec trim_eoi = function
    ("EOI",_ as x)::_ -> [x]
  | h::t -> h::(trim_eoi t)
  | [] -> []
  in 
  Fmt.(pf stdout "<strm<[%a]>>" (list ~sep:comma (parens (pair ~sep:comma (quote string) (quote string)))) (trim_eoi l))
;;
#install_printer pp_token_stream ;;

let pp_ctyp ty = Fmt.(pf stdout "#<ctyp< %s >>" (Eprinter.apply Pcaml.pr_ctyp Pprintf.empty_pc ty));;
let pp_expr ty = Fmt.(pf stdout "#<expr< %s >>" (Eprinter.apply Pcaml.pr_expr Pprintf.empty_pc ty));;
let pp_patt ty = Fmt.(pf stdout "#<patt< %s >>" (Eprinter.apply Pcaml.pr_patt Pprintf.empty_pc ty));;

let pp_str_item ty = Fmt.(pf stdout "#<str_item< %s >>" (Eprinter.apply Pcaml.pr_str_item Pprintf.empty_pc ty));;
let pp_sig_item ty = Fmt.(pf stdout "#<str_item< %s >>" (Eprinter.apply Pcaml.pr_sig_item Pprintf.empty_pc ty));;

(*
let pp_ctyp ty = Fmt.(pf stdout "#<ctyp< %a >>" Pa_ppx_base.Pp_MLast.pp_ctyp ty);;
let pp_expr ty = Fmt.(pf stdout "#<expr< %a >>" Pa_ppx_base.Pp_MLast.pp_expr ty);;
let pp_patt ty = Fmt.(pf stdout "#<patt< %a >>" Pa_ppx_base.Pp_MLast.pp_patt ty);;
*)
(*
#install_printer pp_ctyp ;;
#install_printer pp_expr ;;
#install_printer pp_patt ;;
#install_printer pp_str_item ;;
#install_printer pp_sig_item ;;
 *)
#require "pa_llk_compiler" ;;
#require "pa_llk_runtime" ;;
open Parse_gram ;;
open Print_gram ;;
open Comp_llk ;;


let pp_a_entry e = Fmt.(pf stdout "<:entry<%s>>" (Pr.entry Pprintf.empty_pc e)) ;;
#install_printer pp_a_entry ;;

let pp_a_level e = Fmt.(pf stdout "<:level<%s>>" (Pr.level false Pprintf.empty_pc e)) ;;
#install_printer pp_a_level ;;
(*
let pp_a_symbol e = Fmt.(pf stdout "<:symbol<%s>>" (Pr.symbol Pprintf.empty_pc e)) ;;
#install_printer pp_a_symbol ;;

let pp_a_psymbol e = Fmt.(pf stdout "<:psymbol<%s>>" (Pr.psymbol Pprintf.empty_pc e)) ;;
#install_printer pp_a_psymbol ;;
 *)
let pp_a_rule e = Fmt.(pf stdout "<:rule<%s>>" (Pr.rule true Pprintf.empty_pc e)) ;;
#install_printer pp_a_rule ;;


(*
;;; Local Variables: ***
;;; mode:tuareg ***
;;; End: ***

*)
